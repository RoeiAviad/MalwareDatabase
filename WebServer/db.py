import sqlite3
import os
import json


def get_values(data):
    """
    get values for database from file content
    :param data: the content dict
    :type data: dict
    :return: values for db
    :rtype: tuple
    """
    name = data["name"] if "name" in data else "NA"
    description = data["description"] if "description" in data else "NA"
    attackID = data["id"] if "id" in data else "NA"
    detection = data["x_mitre_detection"] if "x_mitre_detection" in data else "NA"
    platforms = ','.join(data["x_mitre_platforms"]) if "x_mitre_platforms" in data else "NA"

    kill_chain_phases = data["kill_chain_phases"] if "kill_chain_phases" in data else list()
    phase_name_list = list()
    for phase in kill_chain_phases:
        phase_name_list.append(phase["phase_name"])
    phase_name = ','.join(phase_name_list) if len(phase_name_list) > 0 else "NA"

    return name, description, attackID, platforms, detection, phase_name


def clear(conn):
    """
    clear Attacks table
    :param conn: the database connection
    :type conn: sqlite3.Connection
    :return: success
    :rtype: bool
    """
    success = False
    sql = "DELETE FROM Attacks"
    try:
        cur = conn.cursor()             # run query
        cur.execute(sql)
        conn.commit()
        success = True              # return success
    except sqlite3.Error as e:
        print(e)
    return success


def insert(conn, name, description, attackID, platforms, detection, phase_name):
    """
    insert into Attacks table
    :param conn: the database connection
    :type conn: sqlite3.Connection
    :param name: the attack name
    :type name: str
    :param description: the attack description
    :type description: str
    :param attackID: the attack id
    :type attackID: str
    :param platforms: vulnerable platforms
    :type platforms: str
    :param detection: ways to detect attack
    :type detection: str
    :param phase_name: the attack phases
    :type phase_name: str
    :return: success
    :rtype: bool
    """
    success = False
    sql = "INSERT INTO Attacks (name, description, attackID, platforms, detection, phase_name) VALUES (?, ?, ?, ?, ?, ?)"       # sql query
    values = (name, description, attackID, platforms, detection, phase_name)        # values tuple
    try:
        cur = conn.cursor()
        cur.execute("SELECT * FROM Attacks WHERE name='" + name + "'")
        rows = cur.fetchall()
        if len(rows) > 0:
            if rows[0][2] == "NA":      # if already exists
                cur = conn.cursor()         # delete
                cur.execute("DELETE FROM Attacks WHERE name='" + name + "'")
                conn.commit()

                cur = conn.cursor()             # insert
                cur.execute(sql, values)
                conn.commit()
        else:
            cur = conn.cursor()             # insert
            cur.execute(sql, values)
            conn.commit()
        success = True              # return success
    except sqlite3.Error as e:
        print(e)
    return success


def connect():
    """
    connect to database at data.db
    :return: the database connection
    :rtype: sqlite3.Connection
    """
    conn = None
    try:
        conn = sqlite3.connect("data.db")       # connect to database
    except sqlite3.Error as e:
        print(e)
    return conn


def main():
    data_files = os.listdir("data_files")
    with connect() as conn:         # open database
        clear(conn)     # clear database
        for file_name in data_files:        # for every file
            with open("data_files/" + file_name) as file:       # open file
                data = json.load(file)["objects"][0]       # get json content
                values = get_values(data)               # get values for database
                insert(conn, *values)       # add values to db


if __name__ == '__main__':
    main()
