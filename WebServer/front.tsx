declare var require: any
var React = require('react');
var ReactDOM = require('react-dom');
var $ = require("jquery");

/* get info of attack request
 * Input: name
 * Output: none
 */
export function getInfo(name) {
    $.ajax({
        url: "info?name=" + name,           // info page and name parameter
        type: 'GET',                        // HTTP GET
        async: true,                        // async request, no wait
        dataType: 'json',
        success: function (data) {
            data = data[0];     // get first in list since only one

            // print info
            $("#result_name").html(data.name);
            $("#result_description").html(data.description);
            $("#result_id").html(data.attackID);
            $("#result_platforms").html(data.platforms.replaceAll(",", "<br/>"));
            $("#result_detection").html(data.detection);
            $("#result_phase_name").html(data.phase_name.replaceAll(",", "<br/>"));

            $("#result_content").fadeIn();          // show result page
        },
        error: function (error) {
            console.log(error);
        }
    });
}

/* Bot reply to user message
 * Input: user message
 * Output: bot message
 */
export function botReply(msg) {
    msg = msg.trim().toLowerCase();   // remove spaces and change to lower
    if (msg == "help") {
        return "You may ask me:<br/>"
            + "&#183;How are you?<br/>"
            + "&#183;What is your name?<br/>"
            + "&#183;Search attacks of &lt;key&gt;,&lt;key&gt;,&lt;key&gt;<br/>"
            + "&#183;Check url &lt;url&gt;<br/>"
            + "&#183;Check hash &lt;hash&gt;<br/>"
            + "You can always thank me. Be polite, I am a person too :)";
    }
    if (msg.includes("how are you")) {
        return "I am fine, thank you! I am just a few lines of code so you probably need some help ;)";
    }
    if (msg.includes("what is your name")) {
        return "My name is 'Turing test: You shall not pass'!";
    }
    if (msg.includes("thank you")) {
        return "Any time!";
    }
    if (msg == "hi" || msg == "hello") {
        return "Hello you!";
    }
    if (msg.includes("attacks of")) {
        return "Searching attacks...";
    }
    if (msg.includes("url") || msg.includes("hash")) {
        return "Scanning...";
    }

    return "Sorry, I am not that smart :(";
}

/* prevent user entered html
 * Input: unsafe string
 * Output: safe string for html
 */
export function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

/* send search request
 * Input: q to search, list element, input element, counter element
 * Output: none
 */
export function search(q, l, el, counter) {
    $.ajax({
        url: "search?q=" + q,           // search page with q parameter
        type: 'GET',                    // HTTP GET
        async: true,                    // async request, no wait
        dataType: 'json',               // get json
        success: function (data) {
            if (q == el.value) {        // if no change in search
                counter.innerHTML = data.length + " results";       // show number of results

                var items = [];
                for (var i = 0; i < data.length; i++) {             // for every attack
                    items.push(<li key={i} onClick={function (e) { getInfo(e.target.innerHTML); }}>{data[i].name}</li>);        // add attack to list
                }
                ReactDOM.render(<div>{items}</div>, l);      // add list
            }
        }
    });
}

/* handle special messages such as select, file
 * Input: user message
 * Output: none
 */
export function specialBotMsgs(msg) {
    var lastMsg = $(".bot_message:last");       // get last message
    if (lastMsg.html() == "Searching attacks...") {     // if search database request
        msg = msg.substr(msg.indexOf("attacks of") + 10);       // get keywords
        $.ajax({
            url: "search?q=" + msg,           // search page with q parameter
            type: 'GET',                    // HTTP GET
            async: true,                    // async request, no wait
            dataType: 'json',               // get json
            success: function (data) {
                if (data.length == 0) {     // print 0 message
                    lastMsg.html("No attacks found!");
                }
                else {
                    lastMsg.html(data.length + " attacks found: <div class='bot_select_container'></div>");
                    var items = [<option value="" key={0}>Select Attack</option>];
                    for (var i = 0; i < data.length; i++) {             // for every attack
                        items.push(<option value={data[i].name} key={i + 1}>{data[i].name}</option>);        // add options to select
                    }
                    var selects = document.getElementsByClassName("bot_select_container");
                    ReactDOM.render(<select className="bot_select">{items}</select>, selects[selects.length - 1]);      // add options

                    /*  choose attack with bot  */
                    $(".bot_select:last").on("change", function () {
                        var attack = this.value;        // get selected attack
                        getInfo(attack);          // print info
                        this.value = "";                   // reset selection
                    });
                }
            }
        });
    }
    else if (lastMsg.html() == "Scanning...") {
        virusTotalScan(msg);
    }
}

/* make a virus total scan for bot
 * Input: user message
 * Output: none
 */
export function virusTotalScan(msg) {
    var lastMsg = $(".bot_message:last");       // get last message
    var type = "";
    if (msg.includes("url"))        // get type
        type = "url";
    else if (msg.includes("hash"))
        type = "hash";
    var value = msg.substr(msg.indexOf(type) + type.length).trim();       // get value

    var post_data = {};
    post_data[type] = value;
    $.ajax({
        url: "vt",                       // virus total scan page
        type: 'POST',                    // HTTP POST
        async: true,                     // async request, no wait
        dataType: 'json',                // get json
        data: post_data,
        success: function (data) {
            if (type == "url") {        // if url request
                if (data.total && data.total > 0) {     // if done scan
                    var res = data.positives > 0;      // get result
                    var toPrint = res ? "<span class='vt_virus'>Site Infected</span>" : "<span class='vt_clean'>Site Clean</span>";
                    var errors = new Set();
                    for (var scan in data.scans)
                        if (data.scans[scan].detected)      // if virus
                            errors.add(data.scans[scan].result);        // add to errors
                    errors.forEach(function (error) { toPrint += "<br/><span class='vt_virus'>" + error + "</span>"; });      // print errors
                    lastMsg.html(toPrint);     // show result
                }
                else {
                    lastMsg.html("Invalid URL!");     // show error
                }
            }
            else if (type == "hash") {
                if ("code" in data)     // got error
                {
                    lastMsg.html("<span class='vt_error'>" + data.messages[0] + "</span>");     // show result
                }
                else {      // found
                    if (data.scan_results.scan_all_result_a == "Infected") {        // hash infected
                        var toPrint = "<span class='vt_virus'>Hash Infected</span>";
                        data.malware_type.forEach(function (value) {
                            toPrint += "<br/><span class='vt_virus'>" + value + "</span>";
                        });
                        lastMsg.html(toPrint);     // show result
                    }
                    else {      // clean
                        lastMsg.html("<span class='vt_clean'>Hash Clean</span>");     // show result
                    }
                }
            }
        }
    });
}
