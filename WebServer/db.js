'use strict';
var sqlite3 = require("sqlite3").verbose();

module.exports = {
    /* Connect to datavase
     * Input: none
     * Output: database connection
     */
    connect: function () {
        try {
            var db = new sqlite3.Database("./data.db");     // create connection
        }
        catch (error) {
            console.error(error);
        }
        return db;
    },

    /* Search for q in description
     * Input: result to send, database connection, q to search
     * Output: none
     */
    search: function (res, db, q) {
        var words = q.split(',');       // get keywords
        words = words.map(word => word.trim());     // trim kewords

        var sql = "SELECT name FROM Attacks WHERE 1=1";     // get all
        words.forEach(word => sql += " AND description LIKE '%" + this.mysql_real_escape_string(word) + "%'");      // add all keywords to query

        try {
            db.all(sql, function (err, rows) {   // select by description
                res.send(rows);
            });
        }
        catch (error) {
            console.error(error);
        }
    },

    /* get info of attack by the name
     * Input: result to send, database connection, name get info of
     * Output: none
     */
    infoByName: function (res, db, name) {
        try {
            db.all("SELECT * FROM Attacks WHERE name='" + this.mysql_real_escape_string(name) + "'", function (err, rows) {     // select by name
                res.send(rows);
            });
        }
        catch (error) {
            console.error(error);
        }
    },

    /* escape strings for database
     * Input: string
     * Output: escaped string
     */
    mysql_real_escape_string: function (str) {
    return str.replace(/[\0\x08\x09\x1a\n\r"'\\\%]/g, function (char) {
        switch (char) {
            case "\0":
                return "\\0";
            case "\x08":
                return "\\b";
            case "\x09":
                return "\\t";
            case "\x1a":
                return "\\z";
            case "\n":
                return "\\n";
            case "\r":
                return "\\r";
            case "\"":
            case "'":
            case "\\":
            case "%":
                return "\\" + char; // prepends a backslash to backslash, percent,
            // and double/single quotes
            default:
                return char;
        }
    });
}
};