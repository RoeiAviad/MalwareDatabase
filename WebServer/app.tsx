declare var require: any

var React = require('react');
var ReactDOM = require('react-dom');
var $ = require("jquery");
var front = require("./front.tsx");

var bot_state = false;

export class Search extends React.Component {
    componentDidMount() {
        /*  make a search */
        $("#q").on("input", function () {       // on change in search
            var q = $("#q").val();      // get q
            if (q.length > 2) {
                front.search(q, document.getElementById("results"), document.getElementById("q"), document.getElementById("count"));      // search for q
            }
            else {
                front.search('', document.getElementById("results"), document.getElementById("q"), document.getElementById("count"));     // show all
            }
        });
        front.search('', document.getElementById("results"), document.getElementById("q"), document.getElementById("count"));     // first time - show all
    }

    render() {
        return (
            <div id="content">
                <h1>Browse Attacks</h1>
                <input type="text" name="q" id="q" placeholder="Search keywords devided by ','" />
                <h2 id="count"></h2>
                <ul id="results"></ul>
            </div>
        );
    }
}

export class Result extends React.Component {
    componentDidMount() {
        /*  hide result page */
        $("#result_background").on("click", function () {
            $('#result_content').fadeOut();     // hide result page
        });
    }

    render() {
        return (
            <div id="result_content">
                <div id="result">
                    <h1 id="result_name"></h1>
                    <h2 id="result_id"></h2>
                    <p id="result_description"></p>
                    <h2 className="result_values"><u>Vulnerable Platforms</u></h2>
                    <p id="result_platforms"></p>
                    <h2 className="result_values"><u>How to Detect</u></h2>
                    <p id="result_detection"></p>
                    <h2 className="result_values"><u>Phase Names</u></h2>
                    <p id="result_phase_name"></p>
                </div>

                <div id="result_background"></div>
            </div>
        );
    }
}

export class Bot extends React.Component {
    componentDidMount() {
        /*  Bot open and close  */
        $("#bot_logo").on("click", function () {
            if (!bot_state) {     // if closed
                $("#phone_frame").animate({ width: "16vw", height: "30vw", opacity: "1" });     // open
                $("#bot_input").focus();
            }
            else {
                $("#phone_frame").animate({ width: "0", height: "0", opacity: "0" });       // close
            }
            bot_state = !bot_state;
        });

        /*  send message to bot */
        $("#bot_send").on("click", function () {
            var msg = $("#bot_input").val();        // get message
            if (msg) {      // if not empty
                document.getElementById("bot_message_container").innerHTML += "<div class='user_message'>" + front.escapeHtml(msg) + "</div>";        // add message
                document.getElementById("bot_message_container").scrollTop = document.getElementById("bot_message_container").scrollHeight;     // scroll bottom
                $("#bot_input").val("");        // clear input element

                setTimeout(function () {        // one second delay for effect
                    var reply = front.botReply(msg);        // get bot's reply
                    document.getElementById("bot_message_container").innerHTML += "<div class='bot_message'>" + reply + "</div>";        // add message
                    document.getElementById("bot_message_container").scrollTop = document.getElementById("bot_message_container").scrollHeight;     // scroll bottom
                    front.specialBotMsgs(msg);     // handle special messages such as select, file
                }, 1000);
            }
        });

        /*  send message to bot */
        $("#bot_input").on("keyup", function (event) {
            if (event.keyCode === 13) {     // Enter key
                $("#bot_send").trigger("click");        // click event
            }
        });

		/*		on file upload		*/
		$("#attach_file").on("change", function(){
			$("#attach_form").submit();			// submit file form
		});

		/*		stop form submit and use ajax instead			*/
		$("#attach_form").on("submit", function(event){
			event.preventDefault();			// stop submit
			var formData = new FormData();		// create form data object
			var file = document.getElementById("attach_file") as HTMLInputElement;
			formData.append("file", new File([file.files[0]], file.files[0].name, { type: "application/octet-stream" }));

			document.getElementById("bot_message_container").innerHTML += "<div class='user_message'>file " + $("#attach_file").val().split('\\').pop() + "</div>";        // add message
			document.getElementById("bot_message_container").scrollTop = document.getElementById("bot_message_container").scrollHeight;     // scroll bottom
			$("#bot_input").val("");        // clear input element
			document.getElementById("bot_message_container").innerHTML += "<div class='bot_message'><div class='attach_report_empty'>Analyzing...</div></div>";        // add message
			document.getElementById("bot_message_container").scrollTop = document.getElementById("bot_message_container").scrollHeight;     // scroll bottom

			/*		add to scan list		*/
			$.ajax({
		    url: "/upload",
		    type: 'POST',
		    data: formData,
		    success: function (data) {
		        /*		wait for results		*/
				$.ajax({
				    url: "/report?task=" + data.task_id,
				    type: 'GET',
				    success: function (data) {
						$(".attach_report_empty:first").html(data.virustotal.positives > 0 ? "<span class='vt_virus'>File Infected</span>" : "<span class='vt_clean'>File Clean</span>");			// print result
						$(".attach_report_empty:first").removeClass("attach_report_empty").addClass("attach_report_done");		// report done
				    },
				    cache: false,
				    contentType: false,
				    processData: false
			    });
		    },
		    cache: false,
		    contentType: false,
		    processData: false
			});
		});
    }

    render() {
        return (
            <div id="bot_content">
                <img id="bot_logo" src="./resources/bot.png" />
                <div id="phone_frame">
                    <div id="screen_frame">
                        <div id="stay_down">
                            <div id="bot_message_container">
                                <div className="bot_message">Welcome to our Bot! Type 'help' for more information!</div>
                            </div>

                            <div id="bot_input_container">
                                <input type="text" id="bot_input" placeholder="Type Message" list="options" />

								<label id="attach">
									&#128206;
									<form method="POST" action="/tasks/create/file" encType="multipart/form-data" id="attach_form">
									    <input type="file" name="file" id="attach_file" />
									</form>
								</label>

                                <button id="bot_send" type="button">&#10148;</button>

                                <datalist id="options">
                                    <option value="help" key="0" />
                                    <option value="How are you?" key="1" />
                                    <option value="What is your name?" key="2" />
                                    <option value="Thank you!" key="3" />
                                    <option value="Hi" key="4" />
                                    <option value="Hello" key="5" />
                                    <option value="Search attacks of " key="6" />
                                    <option value="Check url " key="7" />
                                    <option value="Check hash " key="8" />
                                </datalist>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

ReactDOM.render(<Search />, document.getElementById('root'));
ReactDOM.render(<Result />, document.getElementById('result_root'));
ReactDOM.render(<Bot />, document.getElementById('bot_root'));
